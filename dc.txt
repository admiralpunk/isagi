//////////////////////////////////////////////////////////////////////////////////////////exp1
 axis([-5 5 0 1]) ;
title('mean=0, std dev=.5') ;
x=-5:0.5:5;
y=normpdf(x,1,1) ;
subplot(1,3,3) ;
plot(x,y);
axis([-5 5 0 1]) ;
title('mean=1, std dev=1');
pkg load statistics
x=-5:0.5:5;
y=normpdf(x,0,1); 
subplot(1,3,1) ;
plot(x,y);
axis([-5 5 0 1]) ;
title('mean=0, std dev=1') ;
x=-5:0.5:5; cc
y=normpdf(x,0,0.5) ;
subplot(1,3,2) ;
plot(x,y);



y=normrnd(0,1,1,200);

Gy=periodogram(y);                                                                                                                                                                        

Ry=abs(ifft(Gy,256));

Ry=[Ry(130:256)' Ry(1:129)'];

t=-127:1:128;


subplot(1,2,1);

plot(Gy);

xlabel('frequency samples');

title('PSD');

 
 subplot(1,2,2);

plot(t,Ry);

xlabel('time shift');

title('autocorrelation');

///////////////////////////////////////////////////////////////////////////////////////////exp2
mck.m
clc;
clear;
close all;

n = input("Enter the number of source elements:");
q = input("Enter the channel matrix p(Y/X):");  %matrix p(Y/X)
disp(q);
disp(' ');

N = 1:n;
p = input("Source probability matrix:"); %probabilities for X

px = diag(p,n,n);
disp("P(X) : ");  %matrix P(X)
disp(px);
disp(' ');

pxy = px*q;   % P(X,Y) = p(X) * P(Y/X)
disp("P(X,Y): ");
disp(pxy);
disp(' ');

py = p*q;   %matrix P(Y)
disp("P(Y) :");
disp(py);
disp(' ');

%H(x) calculation
Hx =0;
for i=1:n
  Hx = Hx + -((p(i)*log2(p(i))));
end

disp("H(x) :");
disp(Hx);
disp(' ');

% H(y) calculation
Hy =0;
for i=1:n
  Hy = Hy + (-(py(i)*log2(py(i))));
end

disp("H(y) :");
disp(Hy);
disp(' ');

% Mutual Entropy H(x,y) calculation
hxy = 0;
for i=1:n
  for j=1:n
    hxy = hxy +(-(pxy(i,j)*log2(pxy(i,j))));
  end
end
disp("H(X,Y): ");
disp(hxy);
disp(' ');

% Conditional Entropy H(Y/X);
h1 = hxy - Hx;
disp("H(X/Y) :");
disp(h1);
disp(' ');

% Conditional Entropy H(Y/X);
h2 = hxy - Hy;
disp("H(Y/X) :");
disp(h2);
disp(' ');

%Mutual information I(X,Y)
Ixy = Hx - h2;
disp("I(X,Y) :");
disp(Ixy);
disp(' ');

if h2==0
  disp("The channel is a lossless channel");
end

if Ixy==0
    disp("The channel is a useless channel");
end

if Hx==Hy
      if h1==0
        disp("The channel is a noiseless channel");
      end
end
//////////////////////////////////////////////////////////////////////////////////////////exp3
shannon.m
%shannonfano code
clc;
clear all;
close all;


pkg load communications;

n = input("Enter the lemgth of the array required");
symb = input("Enter the symbol array:",'s');
prob = input("Enter the probability array:",'s');

symbols = str2num(symb);   %use strsplit for a b c d
disp(symbols);
probabilities = str2num(prob);

dict = shannonfanodict(symbols,probabilities);  %key value pair

disp("\nCharacter|Probability|Code");
disp("________________________________");
for i=1:n
  fprintf("%10d|%11.4f|%s\n",symbols(i),probabilities(i),num2str(dict{i}));
end

inputSig = [1 2 3 3 2 ];
code = shannonfanoenco(inputSig , dict);
decode = shannonfanodeco(code,dict);
disp("Input Signal");
disp(inputSig);
disp("Encoded Signal");
disp(code);
disp("decoded Signal");
disp(decode);

% Calculate Average Codeword Length
avgLength = 0;
for i = 1:n
    avgLength = avgLength + probabilities(i) * length(dict{i});
end



% Calculate entropy
entropy_value = -sum(probabilities .* log2(probabilities));

% Calculate efficiency
efficiency = entropy_value / avgLength;

% Calculate redundancy
redundancy = 1 - efficiency;

% Display results
disp('Average Code Length:');
disp(avgLength);
disp('Entropy:');
disp(entropy_value);
disp('Efficiency:');
disp(efficiency);
disp('Redundancy:');
disp(redundancy);

//////////////////////////////////////////////////////////////////////////////////////////exp4
expt4.m
clc;
clear all;
close all;

n = input('Enter no of code bits: ');
k = input('Enter no of message bits: ');
p = input('Enter parity matrix: ');
disp('Parity matrix: ');
disp(p);

I = eye(k);
G = [I, p];
disp('Generator matrix');
disp('G = [Ik : P]');
disp(G);

m = dec2bin(0:1:2^k-1);
disp('message words');
disp(m);

C = m * G;
for i = 1:2^k
    for j = 1:n
        C(i, j) = mod(C(i, j), 2);
    end
end

disp('Codewords are:');
disp(' C = mG');
disp(C);

weight = sum(C');
disp('Hamming weight of codes');
disp(weight');
weight(1, 1) = weight(1, 2);
d = min(weight);

disp('Minimum Hamming weight(dmin):');
disp(d);

Td = d - 1;
disp('td =');
disp('dmin - 1');
disp(Td);

Tc = (d - 1) / 2;
disp('tc=');
disp('(dmin-1)/2');
disp(Tc);

H = [p', eye(n - k)];
disp(' H = [transpose(P):I(n-k)');
disp(H);
disp(' H transpose');
disp(H');

E = eye([n, n]);

r = input('Enter received codeword(r):');
s = mod(r * H', 2);

disp('Syndrome is (S):');
disp('S = r * transpose(H)');
disp(s);

if all(s == 0)
    disp('Valid code word');
else
    error_pattern = mod(s * H', 2);
    corrected_codeword = mod(r + error_pattern, 2);

    disp('Error pattern(e)= ');
    disp(error_pattern);

    disp('Corrected code word');
    disp('C = r + e');
    disp(corrected_codeword);
end

//////////////////////////////////////////////////////////////////////////////////////////exp5

clc;
clear all;
close all;

pkg load communications

N=3000;
x=randi([0,1],1,N);

M=8;

yy=[];

for i=1:3:length(x)
  if x(i)==0 && x(i+1)==0 && x(i+2)==0
    y = cosd(0)+1j*sind(0);
  elseif x(i)==0 && x(i+1)==0 && x(i+2)==1
    y = cosd(45)+1j*sind(45);
  elseif x(i)==0 && x(i+1)==1 && x(i+2)==1
    y = cosd(90)+1j*sind(90);
  elseif x(i)==0 && x(i+1)==1 && x(i+2)==0
    y = cosd(135)+1j*sind(135);
  elseif x(i)==1 && x(i+1)==1 && x(i+2)==0
    y = cosd(180)+1j*sind(180);
  elseif x(i)==1 && x(i+1)==1 && x(i+2)==1
    y = cosd(225)+1j*sind(225);
  elseif x(i)==1 && x(i+1)==0 && x(i+2)==1
    y = cosd(270)+1j*sind(270);
  elseif x(i)==1 && x(i+1)==0 && x(i+2)==0
    y = cosd(315)+1j*sind(315);
  endif
    yy=[yy y];

endfor

scatterplot(yy);


%------------------------------------------------------------------------------

Edb=20;
E=10^(Edb/10);

n = (1/sqrt(2))*[randn(1, length (yy)) + 1j*randn(1,length(yy))];

sigma=sqrt(1/(log2(M)*E));

r=yy+sigma*n;

scatterplot(r);

/////////////////////////////////////////////////////////////////////////////////////////////////exp6
expt6_new.m
clc;

clear all;

close all;

pkg load communications

N = 3000; % Number of bits to be transmitted using *-PSK

% Too large value may slow down the program

x = randi ([0,1],1,N); % Random input bits generation

M = 8; % Number of Symbols in 8-PSK

% Symbol Generation

yy = [];

for i=1:3:length(x)

  if x(i)==0 && x(i+1)==0 &&x(i+2)==0
    y= cosd(0)+1j*sind(0);

  elseif x(i)==0 && x(i + 1) ==0 && x(i + 2) ==1
    y= cosd(45)+1j*sind (45);

  elseif x(i)==0 && x(i + 1) ==1 && x(i + 2) ==1
    y= cosd(98)+1j*sind(90);

  elseif x(i)==0 && x(i + 1) ==1 && x(i + 2) ==0
    y= cosd (135)+1j*sind(135);

  elseif x(i)==1 && x(i + 1) ==1 && x(i + 2) ==0
    y= cosd (180)+1j*sind (180);

  elseif x(i)==1 && x(i+1)==1 && x(i + 2) ==1
    y= cosd(225)+1j*sind (225);

  elseif x(i)==1 && x(i+1)==0 && x(i + 2) ==1
    y= cosd (270)+1j*sind (270);

  elseif x(i)==1 && x(i+1)==0 && x(i + 2) ==0
    y= cosd(315)+1j*sind(315);

  endif % Transmitted Symbols
    yy = [yy y];

endfor

scatterplot(yy); % Constellation Diagram without Noise
xlabel('In-phase', 'FontSize', 16); % Increase font size for x-label
ylabel('Quadrature', 'FontSize', 16); % Increase font size for y-label
title('Constellation Diagram without Noise', 'FontSize', 18);

% Increase the font size and make tick labels bold on both axes
set(gca, 'FontSize', 14, 'FontWeight', 'bold');

EbN0db = 20; % Change this value &amp; run program to see the noisy constellation.
EbN0=10^(EbN0db/10);

% AWGN Channel

n = (1/sqrt(2))*[randn(1, length (yy)) + 1j*randn(1,length(yy))];
sigma =sqrt(1/((log2(M))*EbN0));

% Received Symbols
r = yy + sigma*n;
scatterplot(r); % Constellation Diagram with Noise
xlabel('In-phase', 'FontSize', 16); % Increase font size for x-label
ylabel('Quadrature', 'FontSize', 16); % Increase font size for y-label
title('Constellation Diagram with Noise', 'FontSize', 18);

% Increase the font size and make tick labels bold on both axes
set(gca, 'FontSize', 12, 'FontWeight', 'bold');